import 'business_enums.dart';

create table "hocky" (
    "hocKy" TEXT NOT NULL PRIMARY KEY as semester,
    "moDangKy" TEXT NOT NULL as registrationOpenDate,
    "dongDangKy" TEXT NOT NULL as registrationCloseDate,
    "batDauHoc" TEXT NOT NULL as studyStartDate,
    "ketThucHoc" TEXT NOT NULL as studyEndDate,
    "hanNhapDiem" TEXT NOT NULL as gradeSubmissionDeadline
) as SemesterData;

create table "hocphan" (
    "maHocPhan"	TEXT NOT NULL PRIMARY KEY as id,
    "tenTiengViet"	TEXT NOT NULL as vietnameseTitle,
    "tenTiengAnh"	TEXT NOT NULL as englishTitle,
    "soTinChi"	INTEGER NOT NULL as credits,
    "khoiKienThuc"	TEXT NOT NULL mapped by `const CourseCategoryConverter()` as courseCategory,
    "khoiLuong"	TEXT NOT NULL as workload
) as CourseData;

create table "detaithacsi" (
	"id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"idGiangVien"	INTEGER NOT NULL as supervisorId,
	"tenTiengViet"	TEXT NOT NULL as vietnameseTitle,
	"tenTiengAnh"	TEXT NOT NULL as englishTitle,
	"ghiChu"	TEXT NOT NULL DEFAULT ("") as note,
	"idHocVien"	INTEGER as studentId,
	"ngayGiao"	TEXT as assignedDate,
	"soQdGiao"	TEXT as assignedDecisionNumber,
	"hanBaoVe"	TEXT as defenseDeadline,
	"soQdBaoVe"	TEXT as defenseDecisionNumber,
	"ngayBaoVe"	TEXT as defenseDate,
	"idChuTich"	INTEGER as presidentId,
	"idPhanBien1"	INTEGER as firstReviewerId,
	"idPhanBien2"	INTEGER as secondReviewerId,
	"idThuKy"	INTEGER as secretaryId,
	"idUyVien"	INTEGER as memberId,
    "flag_tracking" INTEGER NOT NULL DEFAULT 0 CHECK(flag_tracking IN (0, 1)) as isTracking,
    "flag_paid" INTEGER NOT NULL DEFAULT 0 CHECK(flag_tracking IN (0, 1)) as isPaid,
	"group"	TEXT ,
	"nam"	TEXT as year,
	"dangKyBaoVe"	INTEGER NOT NULL DEFAULT 0 as isRegisteredForDefense,
	"nopHoSo"	INTEGER NOT NULL DEFAULT 0 as isProfileSubmitted,
	FOREIGN KEY("idChuTich") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idGiangVien") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idPhanBien1") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idPhanBien2") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idThuKy") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idUyVien") REFERENCES "GiangVien"("id")
) as ThesisData;

-- Currently, just place barely enough information about lecturers
-- to be able to link them to students
-- We migrate to english later
create table "giangvien" (
	"id" integer not null primary key autoincrement,
	"maCanBo"	text as managementId,
	"hoTen"	text not null as name,
	"donVi"	text as department,
    "ngoaiTruong" boolean not null default true as isOutsider,
    "gioiTinh" text mapped by `const GenderConverter()` as gender,
    "hocHam" text mapped by `const AcademicRankConverter()` as academicRank,
    "hocVi" text mapped by `const AcademicDegreeConverter()` as academicDegree,
	"sdt"	text as phone,
	"email"	text as personalEmail,
	"cccd"	text as citizenId,
	"ngaySinh"	text as dateOfBirth,
	"stk"	text as bankAccount,
	"nganHang"	text as bankName,
	"mst"	text as taxCode,
	"note"	text as note,
	"ncm"	integer as academicGroupId
) as TeacherData;

create table phd_student (
    id integer primary key autoincrement,
    "cohort" text not null,
	"management_id" text unique,
    "admission_id"  text unique,
    "name"  text not null,
    "gender" text not null mapped by `const GenderConverter()` default 'M',
    "date_of_birth"	datetime,
    "place_of_birth" text,
    "phone"	text not null unique,
    "personal_email" text not null unique,
    "major_name" text not null default 'toán học',
    "major_id"  text not null default 9460101,
    "major_specialization"	text not null default 'n/a',
    "admission_president_id" integer,
    "admission_secretary_id" integer,
    "admission_1st_member_id" integer,
    "admission_2nd_member_id" integer,
    "admission_3rd_member_id" integer,
    "admission_paid" boolean not null default false,
    "thesis" text not null,
    "supervisor_id"	integer not null,
    "secondary_supervisor_id" integer,
    "school_email" text unique,
    "created_time" text not null default current_timestamp,
    "updated_time" text not null default current_timestamp,
    foreign key("admission_president_id") references "giangvien"("id"),
    foreign key("admission_president_id") references "giangvien"("id"),
    foreign key("admission_secretary_id") references "giangvien"("id"),
    foreign key("admission_1st_member_id") references "giangvien"("id"),
    foreign key("admission_2nd_member_id") references "giangvien"("id"),
    foreign key("admission_3rd_member_id") references "giangvien"("id"),
    foreign key("supervisor_id") references "giangvien"("id"),
    foreign key("secondary_supervisor_id") references "giangvien"("id")
);

createPhdStudent: INSERT INTO phd_student (
    cohort,
    admission_id,
    name,
    gender,
    date_of_birth,
    place_of_birth,
    phone,
    personal_email,
    major_name,
    major_id,
    major_specialization,
    thesis,
    supervisor_id,
    secondary_supervisor_id
) VALUES (
    :cohort,
    :admission_id,
    :name,
    :gender,
    :date_of_birth,
    :place_of_birth,
    :phone,
    :personal_email,
    :major_name,
    :major_id,
    :major_specialization,
    :thesis,
    :supervisor_id,
    :secondary_supervisor_id
);

create table "DangKyGiangDay" (
    "idGiangVien" INTEGER NOT NULL AS teacherId,
    "maHocPhan" TEXT NOT NULL AS courseId,
    PRIMARY KEY("idGiangVien", "maHocPhan"),
    FOREIGN KEY("idGiangVien") REFERENCES "giangvien"("id"),
    FOREIGN KEY("maHocPhan") REFERENCES "hocphan"("maHocPhan")
) as TeachingRegistrationData;

searchTeacher(
    :searchText as TEXT OR NULL,
    :outsider as BOOLEAN OR NULL
): SELECT * FROM giangvien
    where hoten LIKE '%' || :searchText || '%'
    or email LIKE '%' || :searchText || '%'
    or macanbo LIKE '%' || :searchText || '%'
    or sdt LIKE '%' || :searchText || '%'
    or email LIKE '%' || :searchText || '%'
    or cccd LIKE '%' || :searchText || '%'
    or stk LIKE '%' || :searchText || '%'
    or mst LIKE '%' || :searchText || '%'
    and (:outsider is null or ngoaitruong = :outsider);

-- Thesis
getTrackingThesisIds: SELECT id FROM detaithacsi WHERE flag_tracking = 1 order by "group";
trackThesis: UPDATE detaithacsi SET flag_tracking = 1 WHERE id = :thesisId;
untrackThesis: UPDATE detaithacsi SET flag_tracking = 0 WHERE id = :thesisId;

getThesisPresidentId: SELECT idChuTich FROM detaithacsi WHERE id = :thesisId;
getThesis1stReviewerId: SELECT idPhanBien1 FROM detaithacsi WHERE id = :thesisId;
getThesis2ndReviewerId: SELECT idPhanBien2 FROM detaithacsi WHERE id = :thesisId;
getThesisSecretaryId: SELECT idThuKy FROM detaithacsi WHERE id = :thesisId;
getThesisMemberId: SELECT idUyVien FROM detaithacsi WHERE id = :thesisId;
setThesisPresidentId: UPDATE detaithacsi SET idChuTich = :teacherId WHERE id = :thesisId;
setThesis1stReviewerId: UPDATE detaithacsi SET idPhanBien1 = :teacherId WHERE id = :thesisId;
setThesis2ndReviewerId: UPDATE detaithacsi SET idPhanBien2 = :teacherId WHERE id = :thesisId;
setThesisSecretaryId: UPDATE detaithacsi SET idThuKy = :teacherId WHERE id = :thesisId;
setThesisMemberId: UPDATE detaithacsi SET idUyVien = :teacherId WHERE id = :thesisId;


-- vim: ft=sql

