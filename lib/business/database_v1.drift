import 'business_enums.dart';
import 'database_v1/fts.drift';
-- import 'database_v1/methods.drift';

-- create table "document_roles" (
--     id TEXT NOT NULL PRIMARY KEY,
--     name TEXT NOT NULL,
--     description TEXT NOT NULL DEFAULT (""),
--     can_expire BOOLEAN NOT NULL DEFAULT FALSE
-- );

create table "NienKhoa" (
    "nienKhoa" TEXT NOT NULL PRIMARY KEY as "cohort",
    "groupUrl" TEXT NOT NULL DEFAULT ("") as "groupUrl"
) as CohortData;

create table "TieuBanXetTuyen" (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nam TEXT NOT NULL as year,
    idChuTich INTEGER NOT NULL as presidentId,
    idThuKy INTEGER NOT NULL as secretaryId,
    idUyVien1 INTEGER NOT NULL as member1Id,
    idUyVien2 INTEGER NOT NULL as member2Id,
    idUyVien3 INTEGER  NOT NULL as member3Id,
    FOREIGN KEY(idChuTich) REFERENCES GiangVien(id),
    FOREIGN KEY(idThuKy) REFERENCES GiangVien(id),
    FOREIGN KEY(idUyVien1) REFERENCES GiangVien(id),
    FOREIGN KEY(idUyVien2) REFERENCES GiangVien(id),
    FOREIGN KEY(idUyVien3) REFERENCES GiangVien(id)
) as AdmissionCouncilData;

CREATE TABLE "HocVien" (
	"id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "soHoSo" TEXT as admissionId,
	"nienKhoa"	TEXT as cohort,
	"maHocVien"	TEXT as studentId,
	"hoTen"	TEXT NOT NULL as name,
	"ngaySinh"	TEXT mapped by `const YmdDateConverter()` as dateOfBirth,
	"gioiTinh"	TEXT mapped by `const GenderConverter()` as gender,
	"noiSinh"	TEXT as placeOfBirth,
	"dienThoai"	TEXT as phone,
	"email"	TEXT as personalEmail,
	"emailHust"	TEXT as schoolEmail,
    "truongTotNghiepDaiHoc" TEXT as bachelorUniversity,
    "nganhTotNghiepDaiHoc" TEXT as bachelorMajor,
    "heTotNghiepDaiHoc" TEXT as bachelorProgram,
    "xepLoaiTotNghiepDaiHoc" TEXT as bachelorGraduationRank,
    "ngayTotNghiepDaiHoc" TEXT mapped by `const YmdDateConverter()` as bachelorGraduationDate,
    "dinhHuongChuyenSau" TEXT as intendedSpecialization,
    "hocPhanDuocMien" TEXT as exemptedCourses,
    "nganhDaoTaoThacSi" TEXT as masterMajor,
	"maTrangThai"	TEXT mapped by `const StudentStatusConverter()` as status,
    "flag_extend_1" BOOLEAN NOT NULL DEFAULT false as hasHirstExtension,
    "flag_extend_2" BOOLEAN NOT NULL DEFAULT false as hasSecondExtension,
	"idTieuBanXetTuyen"	INTEGER as admissionCouncilId,
    "idDienTuyenSinh" TEXT mapped by `const AdmissionTypeConverter()` as admissionType,
	"thanhToanXetTuyen"	BOOL NOT NULL DEFAULT false as isAdmissionPaid,
	FOREIGN KEY(idTieuBanXetTuyen) REFERENCES TieuBanXetTuyen(id),
	FOREIGN KEY(nienKhoa) REFERENCES NienKhoa(nienKhoa) ON UPDATE CASCADE
) as StudentData;

create table "hocky" (
    "hocKy" TEXT NOT NULL PRIMARY KEY as semester,
    "moDangKy" TEXT NOT NULL mapped by `const SureYmdDateConverter()` as registrationOpenDate,
    "dongDangKy" TEXT NOT NULL mapped by `const SureYmdDateConverter()` as registrationCloseDate,
    "batDauHoc" TEXT NOT NULL mapped by `const SureYmdDateConverter()` as studyStartDate,
    "ketThucHoc" TEXT NOT NULL mapped by `const SureYmdDateConverter()` as studyEndDate,
    "hanNhapDiem" TEXT NOT NULL mapped by `const SureYmdDateConverter()` as gradeSubmissionDeadline
) as SemesterData;

create table "hocphan" (
    "maHocPhan"	TEXT NOT NULL PRIMARY KEY as id,
    "tenTiengViet"	TEXT NOT NULL as vietnameseTitle,
    "tenTiengAnh"	TEXT NOT NULL as englishTitle,
    "soTinChi"	INTEGER NOT NULL as credits,
    "khoiKienThuc"	TEXT NOT NULL mapped by `const CourseCategoryConverter()` as courseCategory,
    "khoiLuong"	TEXT NOT NULL as workload
) as CourseData;

create table "detaithacsi" (
	"id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"idGiangVien"	INTEGER NOT NULL as supervisorId,
	"tenTiengViet"	TEXT NOT NULL as vietnameseTitle,
	"tenTiengAnh"	TEXT NOT NULL as englishTitle,
	"ghiChu"	TEXT NOT NULL DEFAULT ("") as note,
	"idHocVien"	INTEGER as studentId,
	"ngayGiao"	TEXT mapped by `const YmdDateConverter()` as assignedDate,
	"soQdGiao"	TEXT as assignedDecisionNumber,
	"hanBaoVe"	TEXT mapped by `const YmdDateConverter()` as defenseDeadline,
	"soQdBaoVe"	TEXT as defenseDecisionNumber,
	"ngayBaoVe"	TEXT mapped by `const YmdDateConverter()` as defenseDate,
	"idChuTich"	INTEGER as presidentId,
	"idPhanBien1"	INTEGER as firstReviewerId,
	"idPhanBien2"	INTEGER as secondReviewerId,
	"idThuKy"	INTEGER as secretaryId,
	"idUyVien"	INTEGER as memberId,
    "flag_tracking" BOOLEAN NOT NULL DEFAULT FALSE,
    "flag_paid" BOOLEAN NOT NULL DEFAULT FALSE,
    "flag_ignore" BOOLEAN NOT NULL DEFAULT FALSE,
	"group"	TEXT ,
	"nam"	TEXT as year,
	"dangKyBaoVe"	INTEGER NOT NULL DEFAULT 0 as isRegisteredForDefense,
	"nopHoSo"	INTEGER NOT NULL DEFAULT 0 as isProfileSubmitted,
	FOREIGN KEY("idChuTich") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idGiangVien") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idPhanBien1") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idPhanBien2") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idThuKy") REFERENCES "GiangVien"("id"),
	FOREIGN KEY("idUyVien") REFERENCES "GiangVien"("id")
) as ThesisData;

-- Currently, just place barely enough information about lecturers
-- to be able to link them to students
-- We migrate to english later
create table "giangvien" (
	"id" integer not null primary key autoincrement,
	"maCanBo"	text as managementId,
	"hoTen"	text not null as name,
	"donVi"	text as department,
    "ngoaiTruong" boolean not null default true as isOutsider,
    "gioiTinh" text mapped by `const GenderConverter()` as gender,
    "hocHam" text mapped by `const AcademicRankConverter()` as academicRank,
    "hocVi" text mapped by `const AcademicDegreeConverter()` as academicDegree,
	"sdt"	text as phone,
	"email"	text as personalEmail,
	"cccd"	text as citizenId,
	"ngaySinh"	text mapped by `const YmdDateConverter()` as dateOfBirth,
	"stk"	text as bankAccount,
	"nganHang"	text as bankName,
	"mst"	text as taxCode,
	"note"	text as note,
	"ncm"	integer as academicGroupId
) as TeacherData;

create table "phd_cohort" (
    "cohort" text not null primary key,
    "created_time" datetime not null default current_timestamp,
    "updated_time" datetime not null default current_timestamp
);

create table "phd_student" (
    "id" integer not null primary key autoincrement,
    "cohort" text not null,
	"management_id" text unique,
    "admission_id"  text unique not null,
    "name"  text not null,
    "gender" text not null mapped by `const GenderConverter()` default 'M',
    "date_of_birth"	datetime,
    "place_of_birth" text,
    "phone"	text not null unique,
    "personal_email" text not null unique,
    "major_name" text not null default 'toán học',
    "major_id"  text not null default 9460101,
    "major_specialization"	text not null default 'n/a',
    "admission_president_id" integer,
    "admission_secretary_id" integer,
    "admission_1st_member_id" integer,
    "admission_2nd_member_id" integer,
    "admission_3rd_member_id" integer,
    "admission_paid" boolean not null default false,
    "thesis" text not null,
    "supervisor_id"	integer not null,
    "secondary_supervisor_id" integer,
    "school_email" text unique,
    "created_time" text not null default current_timestamp,
    "updated_time" text not null default current_timestamp,
    foreign key("admission_president_id") references "giangvien"("id"),
    foreign key("admission_president_id") references "giangvien"("id"),
    foreign key("admission_secretary_id") references "giangvien"("id"),
    foreign key("admission_1st_member_id") references "giangvien"("id"),
    foreign key("admission_2nd_member_id") references "giangvien"("id"),
    foreign key("admission_3rd_member_id") references "giangvien"("id"),
    foreign key("supervisor_id") references "giangvien"("id"),
    foreign key("secondary_supervisor_id") references "giangvien"("id")
);

create table "DangKyGiangDay" (
    "idGiangVien" INTEGER NOT NULL AS teacherId,
    "maHocPhan" TEXT NOT NULL AS courseId,
    PRIMARY KEY("idGiangVien", "maHocPhan"),
    FOREIGN KEY("idGiangVien") REFERENCES "giangvien"("id"),
    FOREIGN KEY("maHocPhan") REFERENCES "hocphan"("maHocPhan")
) as TeachingRegistrationData;

create table "LopTinChi" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT,
    "maLopHoc" TEXT NOT NULL AS classId,
    "maHocPhan" TEXT NOT NULL AS courseId,
    "idGiangVien" INTEGER AS teacherId,
    "soLuongDangKy" INTEGER NOT NULL DEFAULT 0 AS registrationCount,
    "urlTruyCap" TEXT AS accessUrl,
    "customBeginDate" DATETIME,
    "customEndDate" DATETIME,
    "hocKy" TEXT NOT NULL AS semester,
    "phongHoc" TEXT AS classroom,
    "ngayHoc" TEXT AS dayOfWeek,
    "tietBatDau" INTEGER AS startPeriod,
    "tietKetThuc" INTEGER AS endPeriod,
    "trangThai" INTEGER mapped by `const CourseClassStatusConverter()` AS status
) as CourseClassData;

create table "teaching_assignment" (
    "class_id" INTEGER NOT NULL REFERENCES "LopTinChi"("id"),
    "teacher_id" INTEGER NOT NULL REFERENCES "GiangVien"("id"),
    "sort_order" INTEGER NOT NULL DEFAULT 1,
    "weight" REAL NOT NULL DEFAULT 1.0,
    PRIMARY KEY("class_id", "teacher_id")
);

create table "DangKyHoc" (
    idLopTinChi INTEGER NOT NULL AS courseClassId,
    idHocVien INTEGER NOT NULL AS studentId,
    PRIMARY KEY(idLopTinChi, idHocVien),
    FOREIGN KEY(idLopTinChi) REFERENCES LopTinChi(id),
    FOREIGN KEY(idHocVien) REFERENCES phd_student(id)
) as ClassCourseRegistrationData;



searchTeacher(
    :searchText as TEXT OR NULL,
    :outsider as BOOLEAN OR NULL
): SELECT * FROM giangvien
    where hoten LIKE '%' || :searchText || '%'
    or email LIKE '%' || :searchText || '%'
    or macanbo LIKE '%' || :searchText || '%'
    or sdt LIKE '%' || :searchText || '%'
    or email LIKE '%' || :searchText || '%'
    or cccd LIKE '%' || :searchText || '%'
    or stk LIKE '%' || :searchText || '%'
    or mst LIKE '%' || :searchText || '%'
    and (:outsider is null or ngoaitruong = :outsider);

-- Thesis
getTrackingThesisIds: SELECT id FROM detaithacsi WHERE flag_tracking = 1 order by "soQdBaoVe";
trackThesis: UPDATE detaithacsi SET flag_tracking = 1 WHERE id = :thesisId;
untrackThesis: UPDATE detaithacsi SET flag_tracking = 0 WHERE id = :thesisId;

getThesisPresidentId: SELECT idChuTich FROM detaithacsi WHERE id = :thesisId;
getThesis1stReviewerId: SELECT idPhanBien1 FROM detaithacsi WHERE id = :thesisId;
getThesis2ndReviewerId: SELECT idPhanBien2 FROM detaithacsi WHERE id = :thesisId;
getThesisSecretaryId: SELECT idThuKy FROM detaithacsi WHERE id = :thesisId;
getThesisMemberId: SELECT idUyVien FROM detaithacsi WHERE id = :thesisId;
setThesisPresidentId: UPDATE detaithacsi SET idChuTich = :teacherId WHERE id = :thesisId;
setThesis1stReviewerId: UPDATE detaithacsi SET idPhanBien1 = :teacherId WHERE id = :thesisId;
setThesis2ndReviewerId: UPDATE detaithacsi SET idPhanBien2 = :teacherId WHERE id = :thesisId;
setThesisSecretaryId: UPDATE detaithacsi SET idThuKy = :teacherId WHERE id = :thesisId;
setThesisMemberId: UPDATE detaithacsi SET idUyVien = :teacherId WHERE id = :thesisId;

-- course class
getAllSemesters: SELECT DISTINCT hocKy FROM LopTinChi ORDER BY hocKy DESC;

-- Search functions
-------------------
-- Search for theses
searchTheses(
    :searchText as TEXT
): SELECT id FROM detaithacsi
    WHERE id in (select id from fts_DeTaiThacSi
                 where fts_DeTaiThacSi match :searchText);

-- vim: ft=sql
